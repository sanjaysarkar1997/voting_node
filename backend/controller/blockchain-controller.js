const createContractInstance = require("../utils/web3");

const Web3 = require("web3");
const ganache = require("ganache");

const jwt = require("jsonwebtoken");
const nodeMailer = require("../utils/mail");

const abi = require("./../contractABI.json");
const walletData = require("../data/data");
const walletAddress = require("../data/walletAddress");

const options = {
  wallet: {
    defaultBalance: 100000000000000,
    accounts: [...walletAddress],
    // stop the ganache server from generating new accounts
  },
};

const web3 = new Web3("http://localhost:7545");

let bytecode =
  "";

const router = require("express").Router();

router.get("/get-wallet-address", async (req, res) => {
  try {
    const accounts = await web3.eth.getAccounts();

    res.json({
      message: "Accounts",
      data: accounts,
      status: true,
    });
  } catch (error) {
    console.log(error);
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

router.get("/get-accounts", async (req, res) => {
  try {
    const accounts = await web3.eth.getAccounts();

    res.json({
      message: "Accounts",
      data: accounts.map((account) => {
        return { ...walletData[account], address: account };
      }),
      status: true,
    });
  } catch (error) {
    console.log(error);
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

router.post("/deploy-contract", async (req, res) => {
  // deploy the contract to the blockchain
  const contract = new web3.eth.Contract(abi);

  try {
    const data = await contract
      .deploy({
        data: bytecode,
        arguments: [req.body.candidates], // constructor arguments
      })
      .send({
        from: req.body.chairperson, // sender's address
        gas: 5000000, // gas limit for the transaction
      });

    res.json({
      message: "Contract Deployed",
      data: data,
      status: true,
    });
  } catch (error) {
    console.log(error);
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

router.get("/get-methods", async (req, res) => {
  console.log(req.query.contractAddress, "query");
  try {
    const constract = createContractInstance(req.query.contractAddress);

    const methods = await constract.methods;

    res.json({
      message: "Methods",
      data: methods,
      status: true,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

router.get("/get-candidates", async (req, res) => {
  try {
    const contract = createContractInstance(req.query.contractAddress);

    const candidates = await contract.methods.getCandidates().call();

    res.json({
      message: "Candidates",
      data: candidates.map((candidate) => {
        console.log(candidate.name);
        console.log(walletData[candidate.name]);
        return {
          ...walletData[candidate.name],
          address: candidate[0],
        };
      }),
      status: true,
    });
  } catch (error) {
    console.log(error);
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

// get the list of candidates
router.get("/candidate/:id", async (req, res) => {
  try {
    const contract = createContractInstance(req.query.contractAddress);

    const candidate = await contract.methods.candidates(req.params.id).call();
    res.json({
      message: "Candidate",
      data: candidate,
      status: true,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

// get the chairperson
router.get("/chairperson", async (req, res) => {
  try {
    const chairperson = await contract.methods.chairperson().call();
    res.json({
      message: "Chairperson",
      data: chairperson,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error,
    });
  }
});

// get the last block number from the local node
router.get("/last-block", async (req, res) => {
  try {
    const lastBlock = await web3.eth.getBlockNumber();
    res.json({
      message: "Last Block",
      data: lastBlock,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error,
    });
  }
});

// get the contents of the last block
router.get("/last-block-details", async (req, res) => {
  try {
    const lastBlock = await web3.eth.getBlockNumber();
    const lastBlockDetails = await web3.eth.getBlock(lastBlock);
    res.json({
      message: "Last Block Details",
      data: lastBlockDetails,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error,
    });
  }
});

router.get("/get-state", async (req, res) => {
  try {
    const contract = createContractInstance(req.query.contractAddress);

    const state = await contract.methods.state().call();

    console.log("state");
    console.log(state);

    res.json({
      message: "State",
      data: state,
      status: true,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

router.get("/start-voting", async (req, res) => {
  try {
    const contract = createContractInstance(req.query.contractAddress);
    const startVote = await contract.methods.startVote().send({
      from: req.query.chairperson,
      gas: 5000000,
    });
    res.json({
      message: "Start Vote",
      data: startVote,
      status: true,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

// end vote
router.get("/end-voting", async (req, res) => {
  try {
    const contract = createContractInstance(req.query.contractAddress);
    const endVote = await contract.methods.endVote().send({
      from: req.query.chairperson,
      gas: 5000000,
    });

    console.log(endVote);

    res.json({
      message: "End Vote",
      data: endVote,
      status: true,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

// wining-candidate
router.get("/wining-candidate", async (req, res) => {
  try {
    const contract = createContractInstance(req.query.contractAddress);
    const winingCandidate = await contract.methods.winningCandidate().call();
    res.json({
      message: "Wining Candidate",
      data: walletData[winingCandidate],
      status: true,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

// get candidate vote
router.get("/get-candidate-details", async (req, res) => {
  try {
    const contract = createContractInstance(req.query.contractAddress);
    console.log(contract);
    const candidateVote = await contract.methods
      .candidates(req.query.candidateId)
      .call();
    res.json({
      message: "Candidate Vote",
      data: {
        ...walletData[candidateVote.name],
        voteCount: candidateVote.voteCount,
      },
      status: true,
    });

    console.log(candidateVote);
  } catch (error) {
    console.log(error);
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

// trigger a mail
router.get("/trigger-mail", async (req, res) => {
  try {
    console.log("trigger mail");
    const mail = await nodeMailer("sanjaysarkar430@gmail.com");

    console.log(mail);

    res.json({
      message: "Mail Sent",
      status: true,
    });
  } catch (error) {
    console.log(error);
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

// give rights to vote to a voter
router.post("/give-rights-to-voter", async (req, res) => {
  try {
    const contract = createContractInstance(req.body.contractAddress);

    // console.log()
    const token = jwt.sign(
      {
        ...walletData[req.body.voter],
        contractAdress: req.body.contractAddress,
        voterId: req.body.voter,
        otp: Math.floor(1000 + Math.random() * 9000),
      },
      "ascbchjabcjascbj"
    );

    const giveRightToVote = await contract.methods
      .giveRightToVote(req.body.voter)
      .send({
        from: req.body.chairperson,
        gas: 5000000,
      });

    let url = "http://localhost:3000";

    const mail = await nodeMailer(walletData[req.body.voter].email, {
      subject: "E-Voting Link",
      text: `${url}/give-vote-to-candidate?token=${token}`,
    });

    res.json({
      message: "Give Right To Vote",
      data: {
        ...giveRightToVote,
        url: `${url}/give-vote-to-candidate?token=${token}`,
      },
      status: true,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error.message,
      status: false,
    });
  }
});

router.get("/verify-voter", async (req, res) => {
  try {
    const decoded = jwt.verify(req.query.token, "ascbchjabcjascbj");
    // console.log(decoded.otp);

    const mail = await nodeMailer(decoded.email, {
      subject: "E voting - OTP",
      text: `Your OTP is ${decoded.otp}`,
    });

    res.json({
      message: "JWT token decoded",
      data: decoded,
      status: true,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error.message,
      status: false,
    });
  }
});

router.post("/give-rights-to-voter-bulk", async (req, res) => {
  try {
    const contract = createContractInstance(req.body.contractAddress);
    const giveRightToVoterInBulk = await contract.methods
      .giveRightToVoterInBulk([req.body.voter])
      .send({
        from: req.body.chairperson,
        gas: 5000000,
      });
    res.json({
      message: "Give Right To Vote bulk",
      data: giveRightToVote,
      status: true,
    });
  } catch (error) {
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

router.get("/give-vote-to-candidate", async (req, res) => {
  try {
    const contract = createContractInstance(req.query.contractAddress);

    console.log(req.query);

    const giveVoteToCandidate = await contract.methods
      .vote(req.query.candidateId)
      .send({
        from: req.query.voterId,
        gas: 1500000,
      });
    res.json({
      message: "Give Vote To Candidate",
      data: giveVoteToCandidate,
      status: true,
    });
  } catch (error) {
    console.log(error);
    res.json({
      message: "Error",
      data: error,
      status: false,
    });
  }
});

module.exports = router;
